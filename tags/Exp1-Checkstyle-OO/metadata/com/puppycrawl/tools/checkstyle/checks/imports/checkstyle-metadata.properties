Imports.group = Imports

AvoidStarImport.desc     = Checks that there are no import statements that use the * notation.<br/>\r\nRationale: Importing all classes from a package leads to tight coupling between packages and might lead to problems when a new version of a library introduces name clashes.
AvoidStarImport.excludes = packages where star imports are allowed. Note that this property is not recursive, subpackages of excluded packages are not automatically excluded.
AvoidStarImport.name     = Avoid Star (Demand) Imports

IllegalImport.desc        = Checks for imports from a set of illegal packages. By default, the check rejects all <code>sun.*</code> packages since programs that contain direct calls to the sun.* packages are <a href="http://java.sun.com/products/jdk/faq/faq-sun-packages.html" target="_blank">not 100% Pure Java</a>. To reject other packages, set property <code>illegalPkgs</code> to a list of the illegal packages.
IllegalImport.illegalPkgs = Comma (',') seperated list of illegal packages.
IllegalImport.name        = Illegal Imports

ImportControl.desc = Controls what can be imported in each package. Useful for ensuring that application layering rules are not violated, especially on large projects.<br/>\r\nThe DTD for a import control XML document is at http://www.puppycrawl.com/dtds/import_control_1_0.dtd. It contains documentation on each of the elements and attributes.<br/>\r\nThe check validates a XML document when it loads the document. To validate against the above DTD, include the following document type declaration in your XML document:\r\n<pre>\r\n<!DOCTYPE import-control PUBLIC\r\n    "-//Puppy Crawl//DTD Import Control 1.0//EN"\r\n    "http://www.puppycrawl.com/dtds/import_control_1_0.dtd">\r\n</pre>\r\n        
ImportControl.file = Name of the file containing the import control configuration.
ImportControl.name = Import Control
ImportControl.url  = url of the file containing the import control configuration.

ImportOrder.caseSensitive = whether strings comprision should be case sensitive or not
ImportOrder.desc          = Checks the ordering/grouping of imports. Ensures that groups of imports come in a specific order (e.g., java. comes first, javax. comes first, then everything else) and imports within each group are in lexicographic order. Static imports must be at the end of a group and in lexicographic order amongst themselves.
ImportOrder.groups        = list of imports groups (every group identified by string it's started)
ImportOrder.name          = Import Order Check
ImportOrder.ordered       = whether imports within group should be sorted
ImportOrder.separated     = whether imports groups should be separated by, at least, one blank line

RedundantImport.desc = Checks for redundant import statements. An import statement is considered redundant if:\r\n<ul>\r\n<li>It is a duplicate of another import. This is, when a class is imported more than once.</li>\r\n<li>The class imported is from the java.lang package, e.g. importing java.lang.String.</li>\r\n<li>The class imported is from the same package.</li>\r\n</ul>
RedundantImport.name = Redundant Imports

UnusedImports.desc = Checks for unused import statements. Checkstyle uses a simple but very reliable algorithm to report on unused import statements. An import statement is considered unused if:\r\n<ul>\r\n<li>It is not referenced in the file. The algorithm does not support wild-card imports like <code>import java.io.*;</code>. Most IDE's provide very sophisticated checks for imports that handle wild-card imports.</li>\r\n<li>It is a duplicate of another import. This is when a class is imported more than once.</li>\r\n<li>The class imported is from the <code>java.lang</code> package. For example importing <code>java.lang.String</code>.</li>\r\n<li>The class imported is from the same package.</li>\r\n</ul>\r\n
UnusedImports.name = Unused Imports
